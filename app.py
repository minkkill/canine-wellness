import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
import warnings

warnings.filterwarnings('ignore')

st.set_page_config(
    page_title="üêï –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–±–∞–∫",
    page_icon="üêï",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #2E86AB;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .section-header {
        color: #A23B72;
        font-size: 1.5rem;
        font-weight: bold;
        margin: 2rem 0 1rem 0;
        border-bottom: 2px solid #F18F01;
        padding-bottom: 0.5rem;
    }
    .prediction-box {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    .unhealthy-box {
        background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
    }
</style>
""", unsafe_allow_html=True)

st.markdown('<h1 class="main-header">üêï –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏–∑–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–±–∞–∫</h1>', unsafe_allow_html=True)

breed_translation = {
    'Labrador Retriever': '–õ–∞–±—Ä–∞–¥–æ—Ä-—Ä–µ—Ç—Ä–∏–≤–µ—Ä',
    'German Shepherd': '–ù–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞',
    'Golden Retriever': '–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ä–µ—Ç—Ä–∏–≤–µ—Ä',
    'Bulldog': '–ë—É–ª—å–¥–æ–≥',
    'Beagle': '–ë–∏–≥–ª—å',
    'Poodle': '–ü—É–¥–µ–ª—å',
    'Rottweiler': '–†–æ—Ç–≤–µ–π–ª–µ—Ä',
    'Yorkshire Terrier': '–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä',
    'Boxer': '–ë–æ–∫—Å–µ—Ä',
    'Dachshund': '–¢–∞–∫—Å–∞',
}

sex_translation = {
    'Male': '–°–∞–º–µ—Ü',
    'Female': '–°–∞–º–∫–∞',
    'Unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

size_translation = {
    'Small': '–ú–∞–ª–µ–Ω—å–∫–∏–π',
    'Medium': '–°—Ä–µ–¥–Ω–∏–π',
    'Large': '–ë–æ–ª—å—à–æ–π',
    'Unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

activity_translation = {
    'Low': '–ù–∏–∑–∫–∏–π',
    'Moderate': '–£–º–µ—Ä–µ–Ω–Ω—ã–π',
    'High': '–í—ã—Å–æ–∫–∏–π',
    'Unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

diet_translation = {
    'Dry Food': '–°—É—Ö–æ–π –∫–æ—Ä–º',
    'Wet Food': '–í–ª–∞–∂–Ω—ã–π –∫–æ—Ä–º',
    'Raw': '–°—ã—Ä–æ–µ –ø–∏—Ç–∞–Ω–∏–µ',
    'Unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

spay_translation = {
    'Spayed/Neutered': '–ö–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
    'Intact': '–ù–µ –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
    'Unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
}

@st.cache_data
def load_data():
    df = pd.read_csv('data/synthetic_dog_breed_health_data.csv')
    df['Weight (kg)'] = df['Weight (lbs)'] * 0.453592
    df = df.rename(columns={
        'Breed': '–ü–æ—Ä–æ–¥–∞',
        'Breed Size': '–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã',
        'Sex': '–ü–æ–ª',
        'Age': '–í–æ–∑—Ä–∞—Å—Ç',
        'Weight (kg)': '–í–µ—Å (–∫–≥)',
        'Daily Activity Level': '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        'Diet': '–î–∏–µ—Ç–∞',
        'Spay/Neuter Status': '–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏',
        'Annual Vet Visits': '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥',
        'Healthy': '–ó–¥–æ—Ä–æ–≤'
    })
    df['–ü–æ—Ä–æ–¥–∞'] = df['–ü–æ—Ä–æ–¥–∞'].map(breed_translation).fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–ü–æ–ª'] = df['–ü–æ–ª'].map(sex_translation).fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã'] = df['–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã'].map(size_translation).fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'] = df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].map(activity_translation).fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–î–∏–µ—Ç–∞'] = df['–î–∏–µ—Ç–∞'].map(diet_translation).fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏'] = df['–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏'].map(spay_translation).fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–ó–¥–æ—Ä–æ–≤'] = df['–ó–¥–æ—Ä–æ–≤'].map({'Yes': '–î–∞', 'No': '–ù–µ—Ç'})
    df['–ü–æ—Ä–æ–¥–∞'] = df['–ü–æ—Ä–æ–¥–∞'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã'] = df['–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–ü–æ–ª'] = df['–ü–æ–ª'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'] = df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–î–∏–µ—Ç–∞'] = df['–î–∏–µ—Ç–∞'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    df['–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏'] = df['–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏'].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    return df

df = load_data()

st.sidebar.markdown("## üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
st.sidebar.markdown("---")

st.sidebar.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
breeds = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—ã:",
    options=df['–ü–æ—Ä–æ–¥–∞'].unique(),
    default=df['–ü–æ—Ä–æ–¥–∞'].unique(),
    help="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
)

age_range = st.sidebar.slider(
    "–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):",
    min_value=int(df['–í–æ–∑—Ä–∞—Å—Ç'].min()),
    max_value=int(df['–í–æ–∑—Ä–∞—Å—Ç'].max()),
    value=(int(df['–í–æ–∑—Ä–∞—Å—Ç'].min()), int(df['–í–æ–∑—Ä–∞—Å—Ç'].max())),
    help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞"
)

filtered_df = df[
    (df['–ü–æ—Ä–æ–¥–∞'].isin(breeds)) &
    (df['–í–æ–∑—Ä–∞—Å—Ç'] >= age_range[0]) &
    (df['–í–æ–∑—Ä–∞—Å—Ç'] <= age_range[1])
].copy()

col1, col2, col3, col4 = st.columns(4)

with col1:
    st.markdown("""
    <div class="metric-container">
        <h3>üìä –í—Å–µ–≥–æ —Å–æ–±–∞–∫</h3>
        <h2>{}</h2>
    </div>
    """.format(len(filtered_df)), unsafe_allow_html=True)

with col2:
    healthy_pct = (filtered_df['–ó–¥–æ—Ä–æ–≤'] == '–î–∞').sum() / len(filtered_df.dropna(subset=['–ó–¥–æ—Ä–æ–≤'])) * 100
    st.markdown("""
    <div class="metric-container">
        <h3>üíö –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–æ–±–∞–∫</h3>
        <h2>{:.1f}%</h2>
    </div>
    """.format(healthy_pct), unsafe_allow_html=True)

with col3:
    avg_age = filtered_df['–í–æ–∑—Ä–∞—Å—Ç'].mean()
    st.markdown("""
    <div class="metric-container">
        <h3>üéÇ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç</h3>
        <h2>{:.1f} –ª–µ—Ç</h2>
    </div>
    """.format(avg_age), unsafe_allow_html=True)

with col4:
    avg_weight = filtered_df['–í–µ—Å (–∫–≥)'].mean()
    st.markdown("""
    <div class="metric-container">
        <h3>‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å</h3>
        <h2>{:.1f} –∫–≥</h2>
    </div>
    """.format(avg_weight), unsafe_allow_html=True)

tab1, tab2, tab3, tab4, tab5 = st.tabs(
    ["üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "üéØ –ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã –∑–¥–æ—Ä–æ–≤—å—è", "üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏", "üéõÔ∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö"])

with tab1:
    st.markdown('<div class="section-header">üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</div>', unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        health_by_breed = filtered_df.groupby(['–ü–æ—Ä–æ–¥–∞', '–ó–¥–æ—Ä–æ–≤']).size().unstack(fill_value=0)
        if not health_by_breed.empty and '–î–∞' in health_by_breed.columns:
            health_by_breed['–ü—Ä–æ—Ü–µ–Ω—Ç_–∑–¥–æ—Ä–æ–≤—å—è'] = health_by_breed['–î–∞'] / (
                        health_by_breed['–î–∞'] + health_by_breed.get('–ù–µ—Ç', 0)) * 100

            fig = px.bar(
                x=health_by_breed.index,
                y=health_by_breed['–ü—Ä–æ—Ü–µ–Ω—Ç_–∑–¥–æ—Ä–æ–≤—å—è'],
                title="üè• –ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö —Å–æ–±–∞–∫ –ø–æ –ø–æ—Ä–æ–¥–∞–º",
                color=health_by_breed['–ü—Ä–æ—Ü–µ–Ω—Ç_–∑–¥–æ—Ä–æ–≤—å—è'],
                color_continuous_scale="RdYlGn"
            )
            fig.update_layout(
                xaxis_title="–ü–æ—Ä–æ–¥–∞",
                yaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö (%)",
                showlegend=False,
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)

    with col2:
        size_counts = filtered_df['–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã'].value_counts().dropna()
        if not size_counts.empty:
            fig = px.pie(
                values=size_counts.values,
                names=size_counts.index,
                title="üêï –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –ø–æ—Ä–æ–¥—ã",
                color_discrete_sequence=px.colors.qualitative.Set3
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)

    col3, col4 = st.columns(2)

    with col3:
        activity_health = pd.crosstab(filtered_df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'], filtered_df['–ó–¥–æ—Ä–æ–≤'],
                                      normalize='index') * 100
        if not activity_health.empty and '–î–∞' in activity_health.columns:
            fig = px.bar(
                activity_health,
                y=activity_health.index,
                x='–î–∞',
                orientation='h',
                title="üèÉ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö —Å–æ–±–∞–∫",
                color='–î–∞',
                color_continuous_scale="Viridis"
            )
            fig.update_layout(xaxis_title="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö (%)", yaxis_title="–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
            st.plotly_chart(fig, use_container_width=True)

    with col4:
        scatter_df = filtered_df.dropna(subset=['–í–æ–∑—Ä–∞—Å—Ç', '–í–µ—Å (–∫–≥)', '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥'])
        scatter_df = scatter_df[scatter_df['–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥'] >= 0]
        if not scatter_df.empty:
            fig = px.scatter(
                scatter_df,
                x='–í–æ–∑—Ä–∞—Å—Ç',
                y='–í–µ—Å (–∫–≥)',
                color='–ó–¥–æ—Ä–æ–≤',
                size='–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥',
                title="üìà –í–æ–∑—Ä–∞—Å—Ç –∏ –≤–µ—Å –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–¥–æ—Ä–æ–≤—å—è",
                color_discrete_map={'–î–∞': '#2E8B57', '–ù–µ—Ç': '#DC143C'}
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

with tab2:
    st.markdown('<div class="section-header">üéØ –ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è</div>', unsafe_allow_html=True)

    ml_df = filtered_df.dropna(subset=['–ó–¥–æ—Ä–æ–≤']).copy()

    if len(ml_df) > 10:
        le_dict = {}
        feature_columns = ['–ü–æ—Ä–æ–¥–∞', '–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã', '–ü–æ–ª', '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–î–∏–µ—Ç–∞', '–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏']

        for col in feature_columns:
            if col in ml_df.columns:
                le = LabelEncoder()
                ml_df[col + '_encoded'] = le.fit_transform(ml_df[col].fillna('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                le_dict[col] = le

        X_columns = [col + '_encoded' for col in feature_columns if col in ml_df.columns] + ['–í–æ–∑—Ä–∞—Å—Ç', '–í–µ—Å (–∫–≥)',
                                                                                             '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥']
        X = ml_df[X_columns].fillna(ml_df[['–í–æ–∑—Ä–∞—Å—Ç', '–í–µ—Å (–∫–≥)', '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥']].mean())
        y = (ml_df['–ó–¥–æ—Ä–æ–≤'] == '–î–∞').astype(int)

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üå≥ –ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞")

            rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
            rf_model.fit(X_train, y_train)
            rf_pred = rf_model.predict(X_test)
            rf_accuracy = accuracy_score(y_test, rf_pred)

            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{rf_accuracy:.3f}")

            importance_df = pd.DataFrame({
                '–ü—Ä–∏–∑–Ω–∞–∫': X.columns,
                '–í–∞–∂–Ω–æ—Å—Ç—å': rf_model.feature_importances_
            }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=True)

            fig = px.bar(
                importance_df,
                x='–í–∞–∂–Ω–æ—Å—Ç—å',
                y='–ü—Ä–∏–∑–Ω–∞–∫',
                orientation='h',
                title="–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞",
                color='–í–∞–∂–Ω–æ—Å—Ç—å',
                color_continuous_scale="Blues"
            )
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.markdown("### üìä –ú–æ–¥–µ–ª—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")

            lr_model = LogisticRegression(random_state=42, max_iter=1000)
            lr_model.fit(X_train, y_train)
            lr_pred = lr_model.predict(X_test)
            lr_accuracy = accuracy_score(y_test, lr_pred)

            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", f"{lr_accuracy:.3f}")

            cm = confusion_matrix(y_test, lr_pred)
            fig = px.imshow(
                cm,
                text_auto=True,
                title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏",
                color_continuous_scale="Blues",
                labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å", y="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å")
            )
            st.plotly_chart(fig, use_container_width=True)

        st.markdown("### üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        comparison_df = pd.DataFrame({
            '–ú–æ–¥–µ–ª—å': ['–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è'],
            '–¢–æ—á–Ω–æ—Å—Ç—å': [rf_accuracy, lr_accuracy],
            '–¢–∏–ø': ['–ê–Ω—Å–∞–º–±–ª—å', '–õ–∏–Ω–µ–π–Ω–∞—è']
        })

        fig = px.bar(
            comparison_df,
            x='–ú–æ–¥–µ–ª—å',
            y='–¢–æ—á–Ω–æ—Å—Ç—å',
            color='–¢–∏–ø',
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π",
            text='–¢–æ—á–Ω–æ—Å—Ç—å'
        )
        fig.update_traces(texttemplate='%{text:.3f}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—à–∏—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.")

with tab3:
    st.markdown('<div class="section-header">üîÆ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è</div>', unsafe_allow_html=True)

    if len(ml_df) > 10:
        col1, col2 = st.columns([1, 1])

        with col1:
            st.markdown("#### –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±–∞–∫–µ:")

            pred_breed = st.selectbox("–ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏:", options=df['–ü–æ—Ä–æ–¥–∞'].unique())
            pred_size = st.selectbox("–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã:", options=df['–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã'].unique())
            pred_sex = st.selectbox("–ü–æ–ª —Å–æ–±–∞–∫–∏:", options=df['–ü–æ–ª'].unique())
            pred_age = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", min_value=1, max_value=18, value=5)
            pred_weight = st.slider("–í–µ—Å (–∫–≥):", min_value=2, max_value=70, value=23)
            pred_activity = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", options=df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].unique())
            pred_diet = st.selectbox("–¢–∏–ø –¥–∏–µ—Ç—ã:", options=df['–î–∏–µ—Ç–∞'].unique())
            pred_spay = st.selectbox("–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏:", options=df['–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏'].unique())
            pred_vet = st.slider("–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥:", min_value=0, max_value=5, value=1)

        with col2:
            if st.button("üîÆ –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", type="primary"):
                pred_data = {
                    '–ü–æ—Ä–æ–¥–∞': pred_breed,
                    '–†–∞–∑–º–µ—Ä –ø–æ—Ä–æ–¥—ã': pred_size,
                    '–ü–æ–ª': pred_sex,
                    '–í–æ–∑—Ä–∞—Å—Ç': pred_age,
                    '–í–µ—Å (–∫–≥)': pred_weight,
                    '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': pred_activity,
                    '–î–∏–µ—Ç–∞': pred_diet,
                    '–°—Ç–∞—Ç—É—Å –∫–∞—Å—Ç—Ä–∞—Ü–∏–∏': pred_spay,
                    '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥': pred_vet
                }

                pred_encoded = []
                for col in feature_columns:
                    if col in le_dict:
                        try:
                            encoded_val = le_dict[col].transform([pred_data[col]])[0]
                        except ValueError:
                            encoded_val = 0
                        pred_encoded.append(encoded_val)

                pred_encoded.extend([pred_age, pred_weight, pred_vet])
                pred_array = np.array(pred_encoded).reshape(1, -1)

                rf_prob = rf_model.predict_proba(pred_array)[0][1]
                lr_prob = lr_model.predict_proba(pred_array)[0][1]
                avg_prob = (rf_prob + lr_prob) / 2

                prediction = "–ó–¥–æ—Ä–æ–≤" if avg_prob > 0.5 else "–ù–µ–∑–¥–æ—Ä–æ–≤"

                box_class = "prediction-box" if prediction == "–ó–¥–æ—Ä–æ–≤" else "prediction-box unhealthy-box"

                st.markdown(f"""
                <div class="{box_class}">
                    <h2>–ü—Ä–æ–≥–Ω–æ–∑: {prediction}</h2>
                    <h3>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_prob:.1%}</h3>
                    <p>–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å: {rf_prob:.1%}</p>
                    <p>–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è: {lr_prob:.1%}</p>
                </div>
                """, unsafe_allow_html=True)

                fig = go.Figure(go.Indicator(
                    mode="gauge+number+delta",
                    value=avg_prob * 100,
                    domain={'x': [0, 1], 'y': [0, 1]},
                    title={'text': "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è (%)"},
                    delta={'reference': 50},
                    gauge={
                        'axis': {'range': [None, 100]},
                        'bar': {'color': "darkblue"},
                        'steps': [
                            {'range': [0, 25], 'color': "lightgray"},
                            {'range': [25, 50], 'color': "yellow"},
                            {'range': [50, 75], 'color': "lightgreen"},
                            {'range': [75, 100], 'color': "green"}
                        ],
                        'threshold': {
                            'line': {'color': "red", 'width': 4},
                            'thickness': 0.75,
                            'value': 90
                        }
                    }
                ))

                fig.update_layout(height=300)
                st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.markdown('<div class="section-header">üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</div>', unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        x_axis = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—å X:", ['–í–æ–∑—Ä–∞—Å—Ç', '–í–µ—Å (–∫–≥)', '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥'])
        y_axis = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—å Y:", ['–í–µ—Å (–∫–≥)', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥'])

    with col2:
        color_by = st.selectbox("–¶–≤–µ—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É:", ['–ó–¥–æ—Ä–æ–≤', '–ü–æ—Ä–æ–¥–∞', '–ü–æ–ª', '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'])
        chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:", ['–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è', '–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–∞—Ö–∞', '–°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞'])

    if chart_type == '–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è':
        scatter_df = filtered_df.dropna(subset=[x_axis, y_axis, '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥'])
        scatter_df = scatter_df[scatter_df['–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥'] >= 0]
        if not scatter_df.empty:
            fig = px.scatter(
                scatter_df,
                x=x_axis,
                y=y_axis,
                color=color_by,
                size='–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥',
                hover_data=['–ü–æ—Ä–æ–¥–∞', '–í–æ–∑—Ä–∞—Å—Ç'],
                title=f"{x_axis} –ø—Ä–æ—Ç–∏–≤ {y_axis} —Å —Ü–≤–µ—Ç–æ–º –ø–æ {color_by.lower()}"
            )
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    elif chart_type == '–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–∞—Ö–∞':
        fig = px.box(
            filtered_df.dropna(subset=[y_axis]),
            x=color_by,
            y=y_axis,
            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {y_axis.lower()} –ø–æ {color_by.lower()}"
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
    else:
        fig = px.violin(
            filtered_df.dropna(subset=[y_axis]),
            x=color_by,
            y=y_axis,
            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {y_axis.lower()} –ø–æ {color_by.lower()}"
        )
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("### üîó –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
    numeric_cols = ['–í–æ–∑—Ä–∞—Å—Ç', '–í–µ—Å (–∫–≥)', '–ü–æ—Å–µ—â–µ–Ω–∏–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ –≤ –≥–æ–¥']
    corr_df = filtered_df[numeric_cols].corr()

    fig = px.imshow(
        corr_df,
        text_auto=True,
        aspect="auto",
        title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
        color_continuous_scale="RdBu",
        labels=dict(x="–ü—Ä–∏–∑–Ω–∞–∫–∏", y="–ü—Ä–∏–∑–Ω–∞–∫–∏")
    )
    st.plotly_chart(fig, use_container_width=True)

with tab5:
    st.markdown('<div class="section-header">üéõÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö</div>', unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)

    with col1:
        health_filter = st.multiselect(
            "–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è:",
            options=['–î–∞', '–ù–µ—Ç'],
            default=['–î–∞', '–ù–µ—Ç']
        )

    with col2:
        sex_filter = st.multiselect(
            "–ü–æ–ª —Å–æ–±–∞–∫–∏:",
            options=df['–ü–æ–ª'].unique(),
            default=df['–ü–æ–ª'].unique()
        )

    with col3:
        activity_filter = st.multiselect(
            "–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            options=df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].unique(),
            default=df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].unique()
        )

    explore_df = filtered_df[
        (filtered_df['–ó–¥–æ—Ä–æ–≤'].isin(health_filter + [None])) &
        (filtered_df['–ü–æ–ª'].isin(sex_filter)) &
        (filtered_df['–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].isin(activity_filter))
    ]

    st.markdown(f"### üìã –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ({len(explore_df)} —Å—Ç—Ä–æ–∫)")

    csv = explore_df.to_csv(index=False)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV",
        data=csv,
        file_name='–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ_—Å–æ–±–∞–∫.csv',
        mime='text/csv',
    )

    page_size = st.slider("–°—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:", min_value=10, max_value=100, value=20)

    if len(explore_df) > 0:
        total_pages = len(explore_df) // page_size + (1 if len(explore_df) % page_size > 0 else 0)
        page = st.slider("–°—Ç—Ä–∞–Ω–∏—Ü–∞:", min_value=1, max_value=max(1, total_pages), value=1)

        start_idx = (page - 1) * page_size
        end_idx = start_idx + page_size

        st.dataframe(
            explore_df.iloc[start_idx:end_idx],
            use_container_width=True,
            height=400
        )

        st.markdown(f"–ü–æ–∫–∞–∑–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å {start_idx + 1} –ø–æ {min(end_idx, len(explore_df))} –∏–∑ {len(explore_df)}")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")